import net.fabricmc.loom.task.RemapJarTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.2.0'
    }
}


plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'net.darkhax.curseforgegradle' version '1.0.7'
    id 'net.darkhax.tweedle' version '1.0.5'
    id 'idea'
}


sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17


archivesBaseName = "${mod_id}-${minecraft_version}-${mod_version}-fabric"
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/${mod_id}.accessWidener")
}


repositories {
    mavenLocal()

    maven {
        name = 'Mod Menu'
        url = 'https://maven.terraformersmc.com/releases/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation("net.flytre.flytre_lib:flytre_lib-${minecraft_version}-fabric:${lib_version}") {
        exclude group: "me.shedaniel"
    }

    modRuntimeOnly "com.terraformersmc:modmenu:${modmenu_version}"


}

processResources {
    def buildProps = project.properties.clone()
    filesMatching(['fabric.mod.json', 'pack.mcmeta', "${mod_id}.mixins.json".toString()]) {
        expand buildProps
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}



def auth = new Properties()
try {
    file("auth.properties").withInputStream { auth.load(it) }
} catch (ignored) {
    file("auth_fallback.properties").withInputStream { auth.load(it) }
}

// CurseForge Publishing
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = auth.getProperty("curseforge_token")

    def mainFile = upload(curse_project, file("${project.buildDir}/libs/${archivesBaseName}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = "-Updated to 1.18.2 \n -Obfuscated"
    mainFile.addJavaVersion('Java 17')
    mainFile.addJavaVersion('Java 18')
    mainFile.releaseType = "release"
    mainFile.addModLoader('Fabric')
    mainFile.addRelation("lib", "requiredDependency")
    mainFile.addRelation("fabric-api", "requiredDependency")


    def versions = supported_versions.split(",")
    versions.each(v -> {
        mainFile.addGameVersion(v)
    })

    doLast {

        if (project.hasProperty('mod_homepage')) {

            project.ext.curse_file_url = "${mod_homepage}/files/${mainFile.curseFileId}"
        }
    }
}

task preObfuscation(type: Exec, dependsOn: jar) {
    doFirst {
        def args = ["java", "-cp", "proguard/mod-obfuscator-1.0.0-all.jar", "net.flytre.mod_obfuscator.PreObfuscationTasks", "build", "${archivesBaseName}", "proguard", "${mod_id}"]
        configurations.runtimeClasspath.each {
            args << (it.path + "") //adds item
        }
        commandLine args
    }
}


task ofuscateStep1(type: proguard.gradle.ProGuardTask, dependsOn: preObfuscation) {
    outputs.upToDateWhen { false }
    doFirst {
        injars("build/customlibs/${archivesBaseName}-pre.jar")
        outjars("build/customlibs/${archivesBaseName}-obfus1.jar")

        configurations.runtimeClasspath.each {
            libraryjars(it.path + "")
        }

        configuration("proguard/proguard.cfg")
        repackageclasses("net.flytre.${mod_id}.impl")
        printmapping("proguard/mappings/${archivesBaseName}.mappings")
    }
}

task obfuscateStep2(type: proguard.gradle.ProGuardTask, dependsOn: ofuscateStep1) {
    outputs.upToDateWhen { false }
    doFirst {
        injars("build/customlibs/${archivesBaseName}-obfus1.jar")
        outjars("build/customlibs/${archivesBaseName}-obfus2.jar")

        configurations.runtimeClasspath.each {
            libraryjars(it.path + "")
        }

        configuration("proguard/proguard2.cfg")
        repackageclasses("net.flytre.${mod_id}.mixin")
        printmapping("proguard/mappings/${archivesBaseName}-mixin.mappings")
    }
}

task postObfuscation(type: Exec, dependsOn: obfuscateStep2) {
    commandLine "java", "-cp", "proguard/mod-obfuscator-1.0.0-all.jar", "net.flytre.mod_obfuscator.PostObfuscationTasks", "build", "${archivesBaseName}"
}


task remapObfuscatedJar(type: RemapJarTask) {
    input = file("build/customlibs/${archivesBaseName}-post.jar")
    addNestedDependencies = false
}

prepareRemapObfuscatedJar.dependsOn postObfuscation

task postRemap(type: Exec, dependsOn: remapObfuscatedJar) {
    commandLine "java", "-cp", "proguard/mod-obfuscator-1.0.0-all.jar", "net.flytre.mod_obfuscator.PostRemappingTasks", "build", "${archivesBaseName}"
}